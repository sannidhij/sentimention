1. Group by sentiment
map = function () {
    emit({sentiment:this.sentiment}, {count:1});
}
reduce = "function(key, values) { var count = 0; values.forEach(function(v) { count += v['count'];}); return {count: count}; }"
db.tweets.mapReduce(map, reduce, {out: 'aggregates'})

2. Group by user tweets
map = function () {
	var positive_tweets = 0, negative_tweets = 0, neutral_tweets = 0;
	switch (this.sentiment) { 
		case 'positive':
			positive_tweets = 1;
			break;
		case 'negative':
			negative_tweets = 1;
			break;
		case 'neutral':
			neutral_tweets = 1;
			break;
	} 
	
	emit({user_name:this.original.from_user_name }, { total_tweets:1, positive_tweets:positive_tweets, negative_tweets:negative_tweets, neutral_tweets:neutral_tweets, sentiment:this.sentiment });
}

reduce = "function(key, values) {" + 
		 " 		var total_tweets = 0, negative_tweets = 0, neutral_tweets = 0;" +
		 "      var positive_tweets = 0;" + 
		 "		values.forEach(function(v) { " + 
		 									" total_tweets += v['total_tweets'];" +
		 									" if (v['sentiment'] === 'positive') { positive_tweets += v['positive_tweets']; };" + 	
											" if (v['sentiment'] === 'negative') { negative_tweets += v['negative_tweets']; };" + 
											" if (v['sentiment'] === 'neutral') { neutral_tweets += v['neutral_tweets']; };" + 
											" sentiment = v['sentiment'];" +
											"}); " + 
				"return {total_tweets: total_tweets, positive_tweets: positive_tweets, negative_tweets: negative_tweets, neutral_tweets: neutral_tweets}; " + 
		"}"

db.tweets.mapReduce(map, reduce, {out: {merge: 'user_aggregates'}})
